# app/dashboard/routes.py
####################################################
# Flask Monitoring Web
#
# 
# Project : Python, Flask, MySQLite, Bootstrap
# Author  : Thanapoom Sukarin, Tonson Ubonsri
# Modifier: 
# Version : 
# Date    : Dec 01, 2024
#
####################################################

from flask import Blueprint, render_template,request, url_for, flash, redirect, jsonify, current_app
from flask_login import login_required,current_user
from app.models import DeviceName, DeviceType, Location, Line, SerialNumberHistory, ForceDataHistory, MacAddressHistory, ModuleHistory, db, Work
from sqlalchemy import or_
from app.extensions import db
from . import dashboard_bp


@dashboard_bp.route('/dashboard')
@login_required
def dashboard():
    """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤ Dashboard ‡πÉ‡∏´‡πâ Redirect ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Overview"""
    return redirect(url_for('dashboard.overview_page'))

@dashboard_bp.route("/overview")
@login_required
def overview_page():
    """‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ Overview"""
    total_cm = Work.query.count()
    open_cm = Work.query.filter_by(status="Open").count()
    close_cm = Work.query.filter_by(status="Closed").count()

    return render_template("dashboard/overview.html",
                           total_cm=total_cm,
                           open_cm=open_cm,
                           close_cm=close_cm)


@dashboard_bp.route("/location")
@login_required
def location_page():
    return render_template("dashboard/location.html")

@dashboard_bp.route("/equipment")
@login_required
def equipment_page():
    return render_template("dashboard/equipment.html")

@dashboard_bp.route("/tracking")
@login_required
def tracking_page():
    return render_template("dashboard/tracking.html")
    

@dashboard_bp.route("/api/overview_data")
def overview_data():
    """ API ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏° CM """
    data = {
        "total_cm": Work.query.count(),
        "open_cm": Work.query.filter_by(status="Open").count(),
        "close_cm": Work.query.filter_by(status="Closed").count(),
    }
    return jsonify(data)


@dashboard_bp.route("/api/equipment_failure", methods=["GET"])
def equipment_failure():
    """API: ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏ö‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏ï‡∏≤‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"""
    
    device_counts = (
        db.session.query(DeviceType.name, db.func.count(Work.device_type_id))
        .join(DeviceType, DeviceType.id == Work.device_type_id)  # ‚úÖ JOIN DeviceType        
        .group_by(DeviceType.name)
        .order_by(db.func.count(Work.device_type_id).desc())
        .limit(10)  # ‡∏î‡∏∂‡∏á‡πÅ‡∏Ñ‡πà 10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å
        .all()
    )

    print("üîç DEBUG: Equipment Failure Data:", device_counts)  # ‚úÖ Debug API

    data = {
        "labels": [device_name for device_name, count in device_counts],  # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÅ‡∏ó‡∏ô ID
        "values": [count for device_name, count in device_counts],
    }
    return jsonify(data)




@dashboard_bp.route("/api/pending_tasks_location", methods=["GET"])
def pending_tasks_location():
    """API: ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà"""
    
    location_counts = (
        db.session.query(Location.name, db.func.count(Work.location_id))
        .join(Location, Location.id == Work.location_id)  # ‚úÖ JOIN Location
        .filter(Work.status == "Open")  # ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à
        .group_by(Location.name)
        .order_by(db.func.count(Work.location_id).desc())
        .limit(15)  # ‚úÖ ‡∏î‡∏∂‡∏á‡πÅ‡∏Ñ‡πà 15 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å
        .all()
    )

    print("üîç DEBUG: Pending Tasks by Location Data:", location_counts)  # ‚úÖ Debug API

    data = {
        "labels": [location_name for location_name, count in location_counts],  # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡∏ô ID
        "values": [count for location_name, count in location_counts],
    }
    return jsonify(data)

@dashboard_bp.route("/api/cm_by_line", methods=["GET"])
def cm_by_line():
    """API: ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô CM ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° Line"""
    line_counts = db.session.query(
        Line.name, db.func.count(Work.line_id)
    ).join(Work, Line.id == Work.line_id)  # JOIN ‡∏ï‡∏≤‡∏£‡∏≤‡∏á Work ‡∏Å‡∏±‡∏ö Line
    line_counts = line_counts.group_by(Line.name).order_by(db.func.count(Work.line_id).desc()).all()

    # JSON Response
    data = {
        "labels": [line_name for line_name, count in line_counts],
        "values": [count for line_name, count in line_counts]
    }
    return jsonify(data)


# Location.html
@dashboard_bp.route("/api/get_lines_locations", methods=["GET"])
def get_lines_locations():
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Line ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î + Location ‡∏ï‡∏≤‡∏° Line ID"""
    line_id = request.args.get("line_id")  # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ line_id ‡∏à‡∏≤‡∏Å dropdown

    # üìå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Line ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    lines = db.session.query(Line.id, Line.name).all()
    lines_data = [{"id": line.id, "name": line.name} for line in lines]

    # üìå ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ line_id ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á Location ‡∏Ç‡∏≠‡∏á Line ‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    locations_data = []
    if line_id:
        locations = (
            db.session.query(Location.id, Location.name, Location.line_id)
            .filter(Location.line_id == line_id)
            .all()
        )
        locations_data = [
            {"id": loc.id, "name": loc.name, "line_id": loc.line_id} for loc in locations
        ]

    return jsonify({"lines": lines_data, "locations": locations_data})

@dashboard_bp.route("/api/get_cm_data", methods=["GET"])
def get_cm_data():
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CM ‡∏ï‡∏≤‡∏° Location ID"""
    location_id = request.args.get("location_id")
    if not location_id:
        return jsonify({"labels": [], "values": []})

    cm_counts = (
        db.session.query(Work.status, db.func.count(Work.id))
        .filter(Work.location_id == location_id)
        .group_by(Work.status)
        .all()
    )

    labels = [status for status, count in cm_counts]
    values = [count for status, count in cm_counts]

    return jsonify({"labels": labels, "values": values})


@dashboard_bp.route("/api/get_work_by_location", methods=["GET"])
def get_work_by_location():
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Work ‡∏ï‡∏≤‡∏° Location ID ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"""
    location_id = request.args.get("location_id")

    if not location_id:
        print("‚ùå No location_id provided")
        return jsonify([])  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ location_id ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á

    works = (
        db.session.query(
            Work.work_order,
            Work.status,
            DeviceType.name.label("device_type_name"),
            DeviceName.name.label("device_name_name"),
            Location.name.label("location_name"),  # ‚úÖ ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠ Location
            Work.description,
            Work.report_by
        )
        .join(DeviceType, DeviceType.id == Work.device_type_id, isouter=True)  # ‚úÖ Join ‡∏Å‡∏±‡∏ö DeviceType
        .join(DeviceName, DeviceName.id == Work.device_name_id, isouter=True)  # ‚úÖ Join ‡∏Å‡∏±‡∏ö DeviceName
        .join(Location, Location.id == Work.location_id)  # ‚úÖ JOIN Location
        .filter(Work.location_id == location_id)
        .all()
    )

    print(f"‚úÖ Fetched {len(works)} records for location_id={location_id}")
    for work in works:
        print(f"üîπ {work.work_order} | {work.device_type_name} | {work.device_name_name}")

    data = [
        {
            "work_order": work.work_order,
            "status": work.status,
            "device_type_name": work.device_type_name or "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
            "device_name_name": work.device_name_name or "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
            "location_name": work.location_name,  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠ Location
            "description": work.description,
            "report_by": work.report_by,
        }
        for work in works
    ]

    return jsonify(data)

@dashboard_bp.route("/api/work_count_by_location", methods=["GET"])
def work_count_by_location():
    """API: ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° Location"""

    work_counts = (
        db.session.query(Location.id, Location.name, db.func.count(Work.number))
        .join(Work, Work.location_id == Location.id)  # ‚úÖ Join ‡∏ï‡∏≤‡∏£‡∏≤‡∏á Work ‡∏Å‡∏±‡∏ö Location
        .filter(Work.status == "Open")  # ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à
        .group_by(Location.id, Location.name)
        .order_by(db.func.count(Work.number).desc())  # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢
        .limit(10)
        .all()
    )

    # ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON
    data = {
        "labels": [location_name for location_id, location_name, count in work_counts],
        "values": [count for location_id, location_name, count in work_counts],
        "location_ids": [location_id for location_id, location_name, count in work_counts],  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° location_id
    }
    return jsonify(data)


@dashboard_bp.route("/api/work_status_by_location", methods=["GET"])
def work_status_by_location():
    """API: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏°‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà (‡πÅ‡∏™‡∏î‡∏á Top 10)"""

    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô "Open" ‡πÅ‡∏•‡∏∞ "Close" ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ Location
    work_counts = (
        db.session.query(
            Location.name,
            db.func.count(db.case((Work.status == "Open", 1))).label("open_count"),
            db.func.count(db.case((Work.status == "Closed", 1))).label("close_count"),
        )
        .join(Work, Work.location_id == Location.id)
        .group_by(Location.name)
        .order_by(db.func.count(Work.number).desc())  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        .limit(10)  # ‡∏î‡∏∂‡∏á‡πÅ‡∏Ñ‡πà 10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å
        .all()
    )

    data = {
        "labels": [row.name for row in work_counts],
        "open_values": [row.open_count for row in work_counts],
        "close_values": [row.close_count for row in work_counts],
    }

    return jsonify(data)


# equipment.html

@dashboard_bp.route("/api/get_equipment_types_grouped", methods=["GET"])
def get_equipment_types_grouped():
    """API: ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÅ‡∏ï‡πà‡∏£‡∏ß‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô"""

    # üìå Query ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î + Line ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    equipment_types = (
        db.session.query(DeviceType.name, Line.name.label("line_name"), db.func.count(Work.number))
        .join(Work, Work.device_type_id == DeviceType.id)
        .join(Line, Work.line_id == Line.id)
        .group_by(DeviceType.name, Line.name)  # ‚úÖ ‡∏£‡∏ß‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô ‡πÅ‡∏ï‡πà‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° Line
        .order_by(DeviceType.name, db.func.count(Work.number).desc())  # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠
        .all()
    )
    print("üîç DEBUG: Equipment Types Grouped Data:", equipment_types)

    # üìå ‡∏£‡∏ß‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡πÅ‡∏ï‡πà‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° Line
    grouped_data = {}
    for device_name, line_name, count in equipment_types:
        if device_name not in grouped_data:
            grouped_data[device_name] = []
        grouped_data[device_name].append({"line": line_name, "count": count})

    return jsonify(grouped_data)

@dashboard_bp.route("/api/work_trend_by_equipment", methods=["GET"])
def work_trend_by_equipment():
    """API: ‡∏î‡∏∂‡∏á‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏°‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏õ‡∏µ"""

    equipment_name = request.args.get("equipment_name")  # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ Equipment Name ‡∏à‡∏≤‡∏Å Filter
    if not equipment_name:
        return jsonify({"labels": [], "values": []})
    print("üîç DEBUG: Equipment Name:", equipment_name)

    work_trend = (
        db.session.query(
            db.func.strftime("%Y", Work.create_date).label("year"),  # ‡∏î‡∏∂‡∏á‡∏õ‡∏µ‡∏à‡∏≤‡∏Å created_at
            db.func.count(Work.number).label("work_count")
        )
        .join(DeviceType, DeviceType.id == Work.device_type_id)  # ‚úÖ JOIN ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
        .filter(DeviceType.name == equipment_name)  # ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
        .group_by("year")  # ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏õ‡∏µ
        .order_by("year")  # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏õ‡∏µ
        .all()
    )

    data = {
        "labels": [year for year, count in work_trend],  # üìå ‡∏õ‡∏µ
        "values": [count for year, count in work_trend]  # üìå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏°
    }
    return jsonify(data)

@dashboard_bp.route("/api/breakdown_by_equipment", methods=["GET"])
def breakdown_by_equipment():
    """API: ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏°‡∏Ç‡∏≠‡∏á Device Name ‡∏ï‡∏≤‡∏° Device Type (‡πÑ‡∏°‡πà‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏õ‡∏µ)"""

    equipment_name = request.args.get("device_type_id")
    print("üîç DEBUG: Device Type ID:", equipment_name)
    
    if not equipment_name:
        return jsonify({"labels": [], "values": []})

    breakdown_data = (
        db.session.query(DeviceName.name, db.func.count(Work.device_name_id))
        .join(Work, Work.device_name_id == DeviceName.id)  # ‚úÖ JOIN Work ‡∏Å‡∏±‡∏ö DeviceName
        .join(DeviceType, DeviceType.id == DeviceName.device_type_id)  # ‚úÖ JOIN DeviceType
        .filter(DeviceType.name == equipment_name)  # ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
        .group_by(DeviceName.name)  # ‚úÖ ‡∏£‡∏ß‡∏° Device Name ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
        .order_by(db.func.count(Work.device_name_id).desc())  # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢
        .all()
    )
    print("üîç DEBUG: Breakdown Data:", breakdown_data)


    data = {
        "labels": [device_name for device_name, count in breakdown_data],  # üìå ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
        "values": [count for device_name, count in breakdown_data],  # üìå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏°‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
    }

    return jsonify(data)


