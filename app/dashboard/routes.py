# app/dashboard/routes.py
####################################################
# Flask Monitoring Web
#
# 
# Project : Python, Flask, MySQLite, Bootstrap
# Author  : Thanapoom Sukarin, Tonson Ubonsri
# Modifier: 
# Version : 
# Date    : Dec 01, 2024
#
####################################################

from flask import Blueprint, render_template,request, url_for, flash, redirect, jsonify, current_app
from flask_login import login_required,current_user
from app.models import DeviceName, DeviceType, Location, Line, SerialNumberHistory, ForceDataHistory, MacAddressHistory, ModuleHistory, db, Work
from sqlalchemy import or_
from app.extensions import db
from . import dashboard_bp


@dashboard_bp.route('/dashboard')
@login_required
def dashboard():
    """ ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ Dashboard """
    total_cm = Work.query.count()  # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    open_cm = Work.query.filter_by(status="Open").count()  # ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
    close_cm = Work.query.filter_by(status="Close").count()  # ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß

    return render_template("dashboard/dashboard.html", 
                           total_cm=total_cm,
                           open_cm=open_cm,
                           close_cm=close_cm)

@dashboard_bp.route("/api/overview_data")
def overview_data():
    """ API ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏° CM """
    data = {
        "total_cm": Work.query.count(),
        "open_cm": Work.query.filter_by(status="Open").count(),
        "close_cm": Work.query.filter_by(status="Close").count(),
    }
    return jsonify(data)


@dashboard_bp.route("/api/equipment_failure", methods=["GET"])
def equipment_failure():
    """API: ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏ö‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏ï‡∏≤‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"""
    
    device_counts = (
        db.session.query(DeviceType.name, db.func.count(Work.device_type_id))
        .join(DeviceType, DeviceType.id == Work.device_type_id)  # ‚úÖ JOIN DeviceType
        .group_by(DeviceType.name)
        .order_by(db.func.count(Work.device_type_id).desc())
        .limit(10)  # ‡∏î‡∏∂‡∏á‡πÅ‡∏Ñ‡πà 10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å
        .all()
    )

    print("üîç DEBUG: Equipment Failure Data:", device_counts)  # ‚úÖ Debug API

    data = {
        "labels": [device_name for device_name, count in device_counts],  # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÅ‡∏ó‡∏ô ID
        "values": [count for device_name, count in device_counts],
    }
    return jsonify(data)




@dashboard_bp.route("/api/pending_tasks_location", methods=["GET"])
def pending_tasks_location():
    """API: ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà"""
    
    location_counts = (
        db.session.query(Location.name, db.func.count(Work.location_id))
        .join(Location, Location.id == Work.location_id)  # ‚úÖ JOIN Location
        .filter(Work.status == "Open")  # ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à
        .group_by(Location.name)
        .order_by(db.func.count(Work.location_id).desc())
        .limit(15)  # ‚úÖ ‡∏î‡∏∂‡∏á‡πÅ‡∏Ñ‡πà 15 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å
        .all()
    )

    print("üîç DEBUG: Pending Tasks by Location Data:", location_counts)  # ‚úÖ Debug API

    data = {
        "labels": [location_name for location_name, count in location_counts],  # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡∏ô ID
        "values": [count for location_name, count in location_counts],
    }
    return jsonify(data)

@dashboard_bp.route("/api/cm_by_line", methods=["GET"])
def cm_by_line():
    """API: ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô CM ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° Line"""
    line_counts = db.session.query(
        Line.name, db.func.count(Work.line_id)
    ).join(Work, Line.id == Work.line_id)  # JOIN ‡∏ï‡∏≤‡∏£‡∏≤‡∏á Work ‡∏Å‡∏±‡∏ö Line
    line_counts = line_counts.group_by(Line.name).order_by(db.func.count(Work.line_id).desc()).all()

    # JSON Response
    data = {
        "labels": [line_name for line_name, count in line_counts],
        "values": [count for line_name, count in line_counts]
    }
    return jsonify(data)
