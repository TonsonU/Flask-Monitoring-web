# app/dashboard/routes.py
####################################################
# Flask Monitoring Web
#
# 
# Project : Python, Flask, MySQLite, Bootstrap
# Author  : Thanapoom Sukarin, Tonson Ubonsri
# Modifier: 
# Version : 
# Date    : Dec 01, 2024
#
####################################################

from flask import Blueprint, render_template,request, url_for, flash, redirect, jsonify, current_app
from flask_login import login_required,current_user
from app.models import DeviceName, DeviceType, SerialNumberHistory, ForceDataHistory, MacAddressHistory, ModuleHistory, db, Work
from sqlalchemy import or_
from app.extensions import db
from . import dashboard_bp


@dashboard_bp.route('/dashboard')
@login_required
def dashboard():
    """ ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ Dashboard """
    total_cm = Work.query.count()  # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    open_cm = Work.query.filter_by(status="Open").count()  # ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
    close_cm = Work.query.filter_by(status="Close").count()  # ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß

    return render_template("dashboard/dashboard.html", 
                           total_cm=total_cm,
                           open_cm=open_cm,
                           close_cm=close_cm)

@dashboard_bp.route("/api/overview_data")
def overview_data():
    """ API ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏° CM """
    data = {
        "total_cm": Work.query.count(),
        "open_cm": Work.query.filter_by(status="Open").count(),
        "close_cm": Work.query.filter_by(status="Close").count(),
    }
    return jsonify(data)


@dashboard_bp.route("/api/equipment_failure", methods=["GET"])
def equipment_failure():
    """API: ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏ö‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏ï‡∏≤‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"""
    device_counts = db.session.query(
        Work.device_type_id, db.func.count(Work.device_type_id)
    ).group_by(Work.device_type_id).order_by(db.func.count(Work.device_type_id).desc()).limit(10).all()

    print("üîç DEBUG: Equipment Failure Data:", device_counts)  # ‚úÖ Debug API

    data = {
        "labels": [f"‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå {device_id}" for device_id, count in device_counts],
        "values": [count for device_id, count in device_counts],
    }
    return jsonify(data)



@dashboard_bp.route("/api/pending_tasks_location")
def pending_tasks_location():
    """API: ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà"""
    location_counts = db.session.query(
        Work.location_id, db.func.count(Work.location_id)
    ).filter(Work.status == "Open").group_by(Work.location_id).order_by(db.func.count(Work.location_id).desc()).limit(15).all()

    data = {
        "labels": [f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà {location_id}" for location_id, count in location_counts],
        "values": [count for location_id, count in location_counts],
    }
    return jsonify(data)

