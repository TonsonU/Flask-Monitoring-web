document.addEventListener("DOMContentLoaded", function () {
    let lineFilter = document.getElementById("lineFilter");
    let locationFilter = document.getElementById("locationFilter");
    let workTableBody = document.getElementById("workTableBody");
  
});

// üìå ‡πÇ‡∏´‡∏•‡∏î Bar Chart ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ Location
async function loadBarChartByLocation() {
    try {
        let response = await fetch(`/dashboard/api/work_count_by_location`);
        let data = await response.json();
        console.log("üìä Work Count by Location:", data); // ‚úÖ Debug JSON Response

        let ctx = document.getElementById("work-location-bar-chart").getContext("2d");

        // ‚ùå ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢ Chart ‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        if (window.workLocationChart) {
            window.workLocationChart.destroy();
        }

        let colors = generateColorPalette(data.labels.length); // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡πÅ‡∏ö‡∏ö‡∏ß‡∏ô‡∏ã‡πâ‡∏≥

        window.workLocationChart = new Chart(ctx, {
            type: "bar",
            data: {
                labels: data.labels,  // üìå ‡∏ä‡∏∑‡πà‡∏≠ Location
                datasets: [{
                    label: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏°",
                    data: data.values,  // üìå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏°
                    backgroundColor: colors
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,  // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Chart ‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î
                layout: {
                    padding: {
                        top: 20  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
                    }
                },
                indexAxis: 'y',
                plugins: {
                    legend: { display: false },
                    tooltip: { enabled: true },
                    datalabels: {
                        anchor: 'end',
                        align: 'right',
                        formatter: (value) => value,
                        color: '#000',
                        font: { weight: 'bold', size: 14 }
                    }
                },
                scales: {
                    x: { 
                        beginAtZero: true, 
                        suggestedMax: Math.max(...data.values) * 1.2, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏≠‡∏µ‡∏Å 20%
                        ticks: { stepSize: 1, precision: 0 } 
                    },
                    y: {
                        beginAtZero: true,
                        ticks: { stepSize: 1, precision: 0 }
                    }
                },
                onClick: function(event, elements) {
                    if (elements.length > 0) {
                        let index = elements[0].index;  // ‚úÖ ‡∏î‡∏∂‡∏á Index ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ó‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡∏¥‡∏Å
                        let selectedLocation = data.labels[index];  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠ Location ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                        let selectedLocationId = data.location_ids[index];  // ‚úÖ ‡∏î‡∏∂‡∏á location_id

                        console.log("üìå Selected Location:", selectedLocation);
                        console.log("üìå Selected Location ID:", selectedLocationId);

                        // üìå ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Data Table
                        loadWorkDataTable(selectedLocationId);
                    }
                }
            },
            plugins: [ChartDataLabels]
        });

    } catch (error) {
        console.error("‚ùå Error fetching Work Count data:", error);
    }
}

// üìå ‡πÇ‡∏´‡∏•‡∏î Data Table ‡∏ï‡∏≤‡∏° Location ID ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
async function loadWorkDataTable(location_id) {
    let workTableBody = document.getElementById("workTableBody");

    workTableBody.innerHTML = '<tr><td colspan="7" class="text-center">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</td></tr>'; // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î

    try {
        let response = await fetch(`/dashboard/api/get_work_by_location?location_id=${location_id}`);
        let data = await response.json();
        console.log("üìä Work Data for Location ID:", location_id, data);

        if (data.length === 0) {
            workTableBody.innerHTML =
                '<tr><td colspan="7" class="text-center">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏°</td></tr>';
        } else {
            workTableBody.innerHTML = "";

            // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ "Open" ‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô "Closed"
            data.sort((a, b) => {
                if (a.status === "Open" && b.status === "Closed") return -1;
                if (a.status === "Closed" && b.status === "Open") return 1;
                return 0;
            });

            data.forEach((work) => {
                let maxLength = 30; // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á
                let truncatedDescription = work.description.length > maxLength 
                    ? work.description.substring(0, maxLength) + "..."  // ‚úÖ ‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ï‡∏¥‡∏° "..."
                    : work.description;
                
                // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏Ç‡∏≠‡∏á Status ‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤ Open/Closed
                let statusClass = work.status === "Open" ? "status-open" : "status-closed";

                let row = `<tr>
                    <td>${work.work_order}</td>
                    <td><span class="status-tag ${statusClass}">${work.status}</span></td> 
                    <td>${work.device_type_name}</td>
                    <td>${work.device_name_name}</td>
                    <td>${work.location_name || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}</td>  <!-- ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô location_name ‡πÄ‡∏õ‡πá‡∏ô null -->
                    <td title="${work.description}">${truncatedDescription}</td>  <!-- ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Tooltip -->
                    <td>${work.report_by}</td>                    
                </tr>`;
                workTableBody.innerHTML += row;
            });
        }
    } catch (error) {
        console.error("‚ùå Error fetching work data:", error);
        workTableBody.innerHTML =
            '<tr><td colspan="7" class="text-center">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</td></tr>';
    }
}




// üìå ‡πÇ‡∏´‡∏•‡∏î Stacked Bar Chart: ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏°‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà (Top 10)
async function loadWorkStatusStackedChart() {
    try {
        let response = await fetch("/dashboard/api/work_status_by_location");
        let data = await response.json();
        console.log("üìä Work Status Data:", data);

        let ctx = document.getElementById("work-status-stacked-chart").getContext("2d");

        // ‚ùå ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢ Chart ‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
        if (window.workStatusChart) {
            window.workStatusChart.destroy();
        }

        let colors = {
            open: "rgba(54, 162, 235, 0.8)",  // ‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Open
            close: "rgba(255, 99, 132, 0.8)"  // ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Close
        };

        window.workStatusChart = new Chart(ctx, {
            type: "bar",
            data: {
                labels: data.labels,  // üìå ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
                datasets: [
                    {
                        label: "Open",
                        data: data.open_values,  // üìå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô Open
                        backgroundColor: colors.open
                    },
                    {
                        label: "Close",
                        data: data.close_values,  // üìå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô Close
                        backgroundColor: colors.close
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                layout: {
                    padding: {
                        top: 20  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
                    }
                },
                indexAxis: 'y',
                plugins: {
                    legend: { position: "top" },  // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á Legend ‡∏ö‡∏ô‡∏™‡∏∏‡∏î
                    tooltip: { enabled: true },
                    datalabels: {
                        anchor: 'end',
                        align: 'right',
                        formatter: (value) => value,
                        color: '#000',
                        font: { weight: 'bold', size: 14 }
                    }
                },
                scales: {
                    x: {
                        stacked: true,  // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ö‡∏ö Stacked
                        beginAtZero: true,
                        suggestedMax: Math.max(
                            ...data.open_values.map((v, i) => v + data.close_values[i])  // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å Open+Close
                        ) * 1.2, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏≠‡∏µ‡∏Å 20%
                        ticks: { stepSize: 1, precision: 0 }
                    },
                    y: {
                        stacked: true,  // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ö‡∏ö Stacked
                        beginAtZero: true,
                        ticks: { stepSize: 1, precision: 0 }
                    }
                },                
            }
        });

    } catch (error) {
        console.error("‚ùå Error fetching Work Status data:", error);
    }
}

// üìå ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤ Dashboard ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
document.addEventListener("DOMContentLoaded", loadWorkStatusStackedChart);


// üìå ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
document.addEventListener("DOMContentLoaded", function () {
    loadBarChartByLocation();
});
